import os
import json
import streamlit as st
import openai # Aunque 'OpenAI' se usa despu√©s, 'openai' puede ser para otras cosas o un vestigio.
from dotenv import load_dotenv
import re
from openai import OpenAI # Import espec√≠fico para el cliente
import geopandas as gpd # No usado en el fragmento, pero puede ser para funcionalidades futuras
import folium # No usado en el fragmento, pero puede ser para funcionalidades futuras
from streamlit_folium import st_folium # No usado en el fragmento, pero puede ser para funcionalidades futuras
import unicodedata
import pandas as pd # Necesario para pd.isna en normalize_text




from chatbot_logic import (
    load_chunks_from_jsonl,
    # normalize_text, # No se llama directamente desde aqu√≠
    # extract_query_parameters, # No se llama directamente desde aqu√≠
    # find_relevant_chunks, # No se llama directamente desde aqu√≠
    send_question_to_openai, # Esta s√≠
    system_prompt_v2 # Si la usas directamente aqu√≠, aunque parece que send_question_to_openai la usa
)


load_dotenv()

# Configuraci√≥n del cliente OpenAI
client = OpenAI(
  api_key=st.secrets['openai_key'], # O os.getenv("OPENAI_API_KEY") si usas .env
)

# Carga de datos √∫nica al iniciar la app
docs_chunks = load_chunks_from_jsonl('salida_chunks_final.jsonl')

# Configuraci√≥n de Streamlit
st.set_page_config(page_title="Chatbot Corrupci√≥n üí¨", layout="centered")

with st.sidebar:
    st.image(".streamlit/logo.png", use_container_width=True)
    st.title('Chatbot Corrupci√≥n')
    st.markdown('''
    ## Sobre este Chatbot

    Bienvenido al **Chatbot Corrupci√≥n**, una herramienta interactiva dise√±ada para facilitar el acceso y comprensi√≥n de los informes de auditor√≠a relacionados con casos de corrupci√≥n en los gobiernos subnacionales del Per√∫ durante el per√≠odo **2016-2022**.

    Nuestra base de datos incluye **todos los informes de control** emitidos por la **Contralor√≠a General de la Rep√∫blica del Per√∫** en esos a√±os, proporcionando una cobertura completa y actualizada de las acciones de control realizadas a nivel nacional.

    Utiliza este chatbot para explorar informaci√≥n detallada sobre auditor√≠as, hallazgos y recomendaciones, y para obtener respuestas precisas basadas en los documentos oficiales.

    ---
    ### C√≥mo utilizar este Chatbot
    - **Realiza preguntas claras y espec√≠ficas** sobre los informes de auditor√≠a.
    - **Indica localidades o per√≠odos de inter√©s** para obtener informaci√≥n detallada.
    - **Recuerda que las respuestas se basan en documentos oficiales**, y si no se dispone de cierta informaci√≥n, se te proporcionar√° orientaci√≥n para obtenerla.

    ---
    ''')
    st.markdown('Desarrollado por **Q-Lab** - Laboratorio de Inteligencia Artificial y M√©todos Computacionales en Ciencias Sociales ([qlab.pucp.edu.pe](https://qlab.pucp.edu.pe/))')
    st.markdown('Contacto: ‚úâÔ∏è [qlab_csociales@pucp.edu.pe](mailto:qlab_csociales@pucp.edu.pe)')

    if st.button("üóëÔ∏è Limpiar conversaci√≥n"):
        st.session_state.messages = [{"role": "assistant", "content": "Conversaci√≥n reiniciada. ¬øEn qu√© m√°s puedo ayudarte?"}]
        st.experimental_rerun() # st.rerun() en versiones m√°s nuevas


def main():
    st.title("Chatbot Corrupci√≥n üí¨")
    st.markdown("Conversa con los informes de la contralor√≠a sobre corrupci√≥n en gobiernos subnacionales en Per√∫ (2016-2022).")
    st.write("---")

    if "messages" not in st.session_state:
        st.session_state.messages = [{"role": "assistant", "content": "Hola, soy el Chatbot Corrupci√≥n. ¬øEn qu√© puedo ayudarte?"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if user_input := st.chat_input("Escribe tu pregunta aqu√≠..."):
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        with st.spinner("Generando respuesta..."):
            conversation_history = [
                msg for msg in st.session_state.messages[:-1] if msg["role"] != "system"
            ]

            # --- MODIFICACI√ìN AQU√ç ---
            # Pasa el 'client' y 'logic_system_prompt' como argumentos
            response_text = send_question_to_openai(
                user_input,
                docs_chunks,
                conversation_history,
                client,             # El cliente OpenAI instanciado en este archivo
                logic_system_prompt # El system_prompt importado de chatbot_logic.py
            )

            assistant_message = {"role": "assistant", "content": response_text}
            st.session_state.messages.append(assistant_message)
            with st.chat_message("assistant"):
                 st.markdown(response_text)

if __name__ == "__main__":
    main()